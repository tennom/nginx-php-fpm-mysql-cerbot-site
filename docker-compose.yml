version: '3.1'

services:
    web:
        # image: nginx:alpine
        build:
            context: nginx
        image: trihost_nginx:1.0
        restart: always
        ports:
            - "80:8080"
            - "443:1443"
        volumes:
            - web-root:/usr/share/nginx/html/tennom.net
            - "${CONFIG_DIR}/nginx/nginx.conf:/etc/nginx/nginx.conf"
            - "${CONFIG_DIR}/nginx/sites-enabled:/etc/nginx/sites-enabled"
            - "${CONFIG_DIR}/nginx/conf.d:/etc/nginx/conf.d"
            - ./logs/nginx:/var/log/nginx
            - certbot-etc:/etc/letsencrypt:ro
            # volumes for verifying domain names to LetsEncrypt and keeping its certificates
            - ./certbot/webroot:/var/www/certbot:ro
            # - certbot-var:${APACHE_CONTAINER_DIR}/var/lib/letsencrypt:ro
            - "php-socket:/sock"
        depends_on:
            - php-fpm

    php-fpm:
        build:
            context: php-fpm
        image: trihost_php-fpm:1.0
        restart: always
        # container_name: app
        volumes:
            - web-root:/usr/share/nginx/html/tennom.net
            - "${CONFIG_DIR}/php-fpm/zz-docker.conf:/usr/local/etc/php-fpm.d/zz-docker.conf"
            - "${CONFIG_DIR}/php-fpm/${PHP_INI_FILE}:${PHP_INI_DIR}/php.ini"
            - "${CONFIG_DIR}/php-fpm/10-opcache.ini:${PHP_INI_DIR}/conf.d/opcache.ini"
            - "php-socket:/sock"
        networks: 
            - backend_network
        depends_on:
            - db
        links: 
            - db

    db:
        build:
            context: mysql
        image: trihost_mysql:1.0
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASS}
            MYSQL_DATABASE: ${DB_NAME}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${USER_PASSWORD}
        volumes:
            - "lessons_db:/var/lib/mysql"
            - ./web/data/migrate.sql:/migrate.sql
        networks: 
            - backend_network

    certbot:
        image: certbot/certbot
        container_name: certbot
        volumes:
            - certbot-etc:/etc/letsencrypt:rw
            - certbot-var:/var/lib/letsencrypt:rw
            # well-known challenges stored by certbot and verified by LetsEncrypt 
            - ./certbot/webroot:/var/www/certbot/:rw

        depends_on:
            - web
        command: >-
          certonly --webroot --webroot-path=/var/www/certbot --email ${ADMIN_EMAIL} 
          --agree-tos --no-eff-email --force-renewal -d ${DOMAIN_NAME}  -d www.${DOMAIN_NAME}
          --uir --hsts --staple-ocsp --must-staple
        # certbot service is not run by default since it's not needed once the certificates received.
        profiles:
        - with-certbot
    
volumes:
    php-socket:
    lessons_db:
    certbot-etc:
    certbot-var:
    web-root:
        driver: local
        driver_opts:
            type: none
            device: ${WEB_ROOT_DIR}
            o: bind

networks:
    backend_network:
        driver: bridge